# 简答题
## JS异步编程的EventLoop、消息队列
## 什么是宏任务，什么是微任务


# 代码题
## 改写 setTimeout嵌套
function p (str) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(str)
        }, 10)
    }) 
}

p('hello ').then(value => p(value + 'lagou '))
           .then(value => p(value + 'I ❤ U'))
           .then(value => console.log(value))

## 四个练习

### 1. 
let isLastInStock = function (cars) {
    return fp.flowRight(fp.prop('in_stock'), fp.last)(cars)
}

### 2.
let getFirstInName = function (cars) {
    return fp.flowRight(fp.prop('name'), fp.first)(cars)
}

### 3.
let averageDollarValue = function (cars) {
    return fp.flowRight(_average, fp.map('dollar_value'))(cars)
}

### 4.
let sanitizeNames = function (cars) {
    return fp.flowRight(_underscore, fp.map(fp.toLower))(cars)
}
sanitizeNames(["Hello World"]) // ["hello_world"]

# 手写实现 Promise 源码

